# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import sys
import pdf
import help_win
import logging
import os

class TwoWindow(QtWidgets.QMainWindow, help_win.Ui_MainWindow):
        def __init__(self):
            super().__init__()
            self.setupUi(self)
            
class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(95, 142)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("Plane_font_awesome.svg.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        MainWindow.setWindowIcon(icon)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setObjectName("lineEdit")
        self.verticalLayout.addWidget(self.lineEdit)
        self.lineEdit_2 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.verticalLayout.addWidget(self.lineEdit_2)
        
        rx  = QtCore.QRegExp("[a-zA-Z]{100}")    
        val = QtGui.QRegExpValidator(rx) 
        self.lineEdit.setMaxLength(4)
        self.lineEdit_2.setMaxLength(4)
        self.lineEdit.setValidator(val)
        self.lineEdit_2.setValidator(val)
        
        self.lineEdit_3 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_3.setObjectName("lineEdit_3")
        rx  = QtCore.QRegExp("[0-9.]{100}")    
        val = QtGui.QRegExpValidator(rx)
        self.lineEdit_3.setMaxLength(5)
        self.lineEdit_3.setValidator(val)
        
        
        self.verticalLayout.addWidget(self.lineEdit_3)
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setObjectName("pushButton")
        self.pushButton.clicked.connect(self.calculate)
        self.verticalLayout.addWidget(self.pushButton)
        self.gridLayout.addLayout(self.verticalLayout, 0, 0, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 95, 21))
        self.menubar.setObjectName("menubar")
        
        
        self.actionHelp = QtWidgets.QAction(MainWindow)
        self.actionHelp.triggered.connect(self.showDialog) 
        self.actionHelp.setObjectName("actionHelp")
        

        
        MainWindow.setMenuBar(self.menubar)
        self.menubar.addAction(self.actionHelp)
        
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Navigation Calculator"))
        self.lineEdit.setPlaceholderText(_translate("MainWindow", "Origin"))
        self.lineEdit_2.setPlaceholderText(_translate("MainWindow", "Dest"))
        self.lineEdit_3.setPlaceholderText(_translate("MainWindow", "Hdg"))
        self.pushButton.setText(_translate("MainWindow", "Calculate"))
        self.actionHelp.setText(_translate("MainWindow", "Help"))
        
    def showDialog(self):
        self.twoWindow = TwoWindow()
        self.twoWindow.show()
        
    def calculate(self):
        msg = QtWidgets.QMessageBox()
        msg.setIcon(QtWidgets.QMessageBox.Information)
        msg.setText("Error")
        msg.setInformativeText('')
        msg.setWindowTitle("Error")

        
        logger = logging.getLogger(os.path.basename(__file__))
        file_handler = logging.FileHandler('log.txt')
        logger.setLevel(logging.DEBUG)
        file_handler.setLevel(logging.DEBUG)
        
        strfmt = '[%(asctime)s] [%(name)s] [%(levelname)s] > %(message)s'
        datefmt = '%Y-%m-%d %H:%M:%S'
        formatter = logging.Formatter(fmt=strfmt, datefmt=datefmt)
        
        file_handler.setFormatter(formatter)
        logger.addHandler(file_handler)
        
        air1 = self.lineEdit.text().upper()
        air2 = self.lineEdit_2.text().upper()
        hdg = self.lineEdit_3.text()
        try:
                if len(air1) != 4 or len(air2) != 4:
                    msg.setInformativeText('Please use simple ICAO code like XXXX')
                    msg.exec_()
                elif air1 == air2:
                    msg.setInformativeText('Origin and dest ICAO is equal')
                    msg.exec_()
                elif len(hdg) == 0:
                    msg.setInformativeText('Please write heading of runway')
                    msg.exec_()
                else:
                    hdg = float(hdg)
                    if hdg>360:
                        msg.setInformativeText('Heading is wrong')
                        msg.exec_()
                    else:
                        with open('Data/airports.txt', 'r') as f:
                            arr = f.readlines()
                            line = ''.join(arr)
                            if line.find(air1) == -1:
                                msg.setInformativeText('Origin ICAO not found')
                                msg.exec_()
                            elif line.find(air2) == -1:
                                msg.setInformativeText('Dest ICAO not found')
                                msg.exec_()
                            else:
                                logger.debug('OK')
                                pdf.do_a_pdf(air1, air2, hdg)                                
        except Exception as ex:
                logger.debug(str(ex))

if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
